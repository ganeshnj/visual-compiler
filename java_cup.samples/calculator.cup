package calculator;

import java.util.TreeMap;
import java.util.Map;
import java.util.ArrayList;

parser code {:
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

	private Map<String, Integer> values = new TreeMap<String, Integer> ();

	public void setValue (String name, int value) {
		values.put(name, new Integer (value));
		System.out.println (name);
	}
	
	public int getValue (String name) {
		int value = 0;
		if (values.containsKey(name))
			value = values.get(name).intValue();
		return value;
	}
	
	private MyClassContainer container = null;
	public MyClassContainer getContainer() {
		return container;
	}
	
	public void setContainer(MyClassContainer container) {
		this.container = container;
	}
	
	private MyMethodContainer methods = null;
	public MyMethodContainer getMethods() {
		if(methods == null) {
			methods = new MyMethodContainer();
		}
		return methods;
	}
	
	private MyDataMemberContainer dataMembers = null;
	public MyDataMemberContainer getDataMembers() {
		if(dataMembers == null) {
			dataMembers = new MyDataMemberContainer();
		}
		return dataMembers;
	}
:}

terminal			EQUAL;
terminal			PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN;
terminal			EOLN, TERM;
terminal Integer	NUMBER;
terminal String		ID;
terminal			UPLUS, UMINUS;

terminal String		CLASSNAME;
terminal			CREATE, CLASS, METHOD;
terminal			DRAW;
terminal			SET, POSITION, RET, ARG, ACC;
terminal			ADD, TO;
terminal			PUBLIC, PROTECTED, PRIVATE;
terminal			DATA, TYPE;
   
nonterminal 		commands, definitions, definition, instruction;
nonterminal Integer expr;
nonterminal String	accID;

precedence left		PLUS, MINUS;
precedence left		TIMES, DIVIDE;
precedence right	UPLUS, UMINUS;

commands	::=	definitions
			;
		
definitions	::= 
			|	definitions	definition
			;
			
definition	::=	instruction TERM
			;

instruction	::=	ID:n EQUAL expr:e				{: setValue (n, e); :}
			|	expr:e							{: System.out.println (e); :}
			|	CREATE CLASS ID:cn				{: getContainer().addClass(cn); :}
			|	DRAW ID:cn						{: getContainer().getClass(cn).draw(); :}
			|	SET CLASS ID:cn POSITION NUMBER:x NUMBER:y 	{: getContainer().getClass(cn).setPosition(x, y); :}
			|	CREATE METHOD ID:mn				{: getMethods().addMethod(mn); :}
			|	ADD METHOD ID:mn TO ID:cn 		{: getContainer().getClass(cn).addMethod(getMethods().getMethod(mn)); :}
			|	SET METHOD ID:mn RET ID:type	{: getMethods().getMethod(mn).setReturnType(type); :}
			|	SET METHOD ID:mn ARG ID:p 		{: getMethods().getMethod(mn).getArguments().add(p); :}
			|	SET METHOD ID:mn ACC accID:ai	{: getMethods().getMethod(mn).setAccessLevel(ai); :}
			|	CREATE DATA ID:dn				{: getDataMembers().addDataMember(dn); :}
			|	SET DATA ID:dn TYPE ID:type		{: getDataMembers().getDataMember(dn).setType(type); :}
			;

accID ::= PUBLIC		{: RESULT = "+"; :}
		| PROTECTED		{: RESULT = "#"; :}	
		| PRIVATE		{: RESULT = "-"; :}
		;		

expr	::=	expr:e1	PLUS	expr:e2	{: RESULT = e1 + e2; :}
		|	expr:e1	MINUS	expr:e2	{: RESULT = e1 - e2; :}
		|	expr:e1	TIMES	expr:e2	{: RESULT = e1 * e2; :}
		|	expr:e1	DIVIDE	expr:e2	{: RESULT = e1 / e2; :}
		|	MINUS	expr:e			{: RESULT = - e; :} %prec UMINUS
		|	PLUS	expr:e			{: RESULT = + e; :} %prec UPLUS
		|	LPAREN	expr:e	RPAREN	{: RESULT = e; :}
		|	NUMBER:n				{: RESULT = n; :}
		|	ID:n					{: RESULT = getValue(n); :}
		;
